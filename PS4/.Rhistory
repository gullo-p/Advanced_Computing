if (type == "train") {
distMatrix <- matrix(NA, noObs, noObs)
for (obs in 1:noObs) {
# getting the probe for the current observation
probe <- as.numeric(features[obs,])
probeExpanded <- matrix(probe, nrow = noObs, ncol = ncol(features),
byrow = TRUE)
# computing distances between the probe and exemplars in the
# training X
if (p != Inf) {
distMatrix[obs, ] <- (rowSums((abs(features -
probeExpanded))^p) )^(1/p)
} else {
distMatrix[obs, ] <- apply(abs(features - probeExpanded), 1, max)
}
}
} else if (type == "predict") {
noMemory <- nrow(memory)
distMatrix <- matrix(NA, noObs, noMemory)
for (obs in 1:noObs) {
# getting the probe for the current observation
probe <- as.numeric(features[obs,])
probeExpanded <- matrix(probe, nrow = noMemory, ncol = ncol(memory),
byrow = TRUE)
# computing distances between the probe and exemplars in the memory
if (p != Inf) {
distMatrix[obs, ] <- (rowSums((abs(memory -
probeExpanded))^p) )^(1/p)
} else {
distMatrix[obs, ] <- apply(abs(memory - probeExpanded), 1, max)
}
}
}
# Sort the distances in increasing numerical order and pick the first
# k elements
neighbors <- apply(distMatrix, 1, order)
# Compute the frequency of each class in the k nearest neighbors and return the matrix of probabilities
prob <- matrix(NA, nrow =noObs, ncol = length(unique(labels)) )
for (obs in 1:noObs) {
prob[obs, ] <- (as.data.frame(table(labels[neighbors[1:k, obs]]))$Freq)/sum(as.data.frame(table(labels[neighbors[obs, 1:k]]))$Freq ) #controlla che non sia il contrario
predLabels <- rep(NA, noObs)
# predicted label
x <- as.vector(labels[neighbors[obs, 1:k]])
predLabels[obs] <- Mode(x) #computes the mode of the labels of the k-nn
}
# return the results
return(list(predLabels = predLabels,
prob = prob
))
}
# 2 class 2 dimensional mixture of Gaussians
genGaussMix <- function(noObs = c(100, 100),
noGaussians = 10,
mixtureProb = rep(1/noGaussians, noGaussians),
seed = 2222) {
# producing means of our bivariate Gaussians
meansC1 <- rmvnorm(noGaussians, mean = c(1,0), sigma = diag(2))
meansC2 <- rmvnorm(noGaussians, mean = c(0,1), sigma = diag(2))
# for each observation we first randomly select one Gaussian and then
# generate a point according to the parameters of that Gaussian
whichGaussianC1 <- sample(nrow(meansC1), noObs[1],
mixtureProb, replace = TRUE)
whichGaussianC2 <- sample(nrow(meansC2), noObs[2],
mixtureProb, replace = TRUE)
# now drawing samples from selected bivariate Gaussians
drawsC1 <- whichGaussianC1 %>%
sapply(function(x) rmvnorm(1, mean = meansC1[x,],
sigma = diag(2)/5)) %>% t()
drawsC2 <- whichGaussianC2 %>%
sapply(function(x) rmvnorm(1, mean = meansC2[x,],
sigma = diag(2)/5)) %>% t()
# combining and labeling
dataset <- data.frame(rbind(drawsC1, drawsC2),
label = c(rep("C1", noObs[1]), rep("C2", noObs[2])),
y = c(rep(0, noObs[1]), rep(1, noObs[2])),
stringsAsFactors = FALSE)
return(dataset)
}
dataset <- genGaussMix()
a <- kNN(dataset[,1:2], dataset[,4], k = 4, p= 2, type = "train")
a$predLabels
a$prob
table(rep(c(1,2,2,14), 25))
table(rep(c(1,2,2,14), 25))$Freq
as.data.frame(table(rep(c(1,2,2,14), 25)))$Freq
setwd("/Users/guglielmo/Desktop/BGSE/winter_term/Adv_Computing/Advanced_Computing/PS4") #change the path to the directory PS4 of the github repo
source("kNN.R")
genSpirals()
# ----
genSpirals <- function(N = 2000,
degrees = 570,
location = 90,
blend = 0.2,
saveData = TRUE,
savePlot = FALSE) {
# Generate two-spiral data
# idea of the problematic dataset: http://www.benmargolis.com/compsci/ai/two_spirals_problem.htm
# N - number of observations
# degrees - length of the spiral
# location - how far away from the origin
# blend<-blending together
#necessary packages
if (!require("ggplot2")) install.packages("ggplot2"); library(ggplot2)
# define some variables
degrees2rad <- (2*pi)/360 #convert degrees to radiant
location <- location*degrees2rad #how far away from 00 the spiral starts
N1 <- floor(N/2)
N2 <- N-N1
#spiral 1
#we indicate it by 0 in V3
n <- as.vector(location+sqrt(runif(N1))*degrees*degrees2rad)
d1 <- t(rbind(-1*n*cos(n)+runif(N1)*blend, sin(n)*n+runif(N1)*blend, rep(0,N1)))
#the second spiral we indicate by 1 in V3
n <- as.vector(location+sqrt(runif(N1))*degrees*degrees2rad)
d2 <-t(rbind(n*cos(n)+runif(N1)*blend, -1*sin(n)*n+runif(N1)*blend, rep(1,N1)))
#combine the data
data <- data.frame(rbind(d1, d2))
names(data) <- c("x1", "x2", "y")
#create pdf
if (saveData) {
write.csv(data, "dataset.csv", row.names = FALSE)
}
#create pdf plot
if (savePlot) {
cairo_pdf("dataPlot.pdf")
print(
ggplot(data = data,
aes(x = x1, y = x2, colour=y)) +
scale_colour_continuous(guide = FALSE) +
geom_point() +
ggtitle("Spirals") +
xlab("x1") +
ylab("x2") +
theme_bw()
)
dev.off()
}
return(data)
}
genSpirals()
setwd("/Users/guglielmo/Desktop/BGSE/winter_term/Adv_Computing/Advanced_Computing/PS4") #change the path to the directory PS4 of the github repo
source("kNN.R")
# ----
# Denitsa's spirals
# ----
genSpirals <- function(N = 2000,
degrees = 570,
location = 90,
blend = 0.2,
saveData = FALSE,
savePlot = FALSE) {
# Generate two-spiral data
# idea of the problematic dataset: http://www.benmargolis.com/compsci/ai/two_spirals_problem.htm
# N - number of observations
# degrees - length of the spiral
# location - how far away from the origin
# blend<-blending together
#necessary packages
if (!require("ggplot2")) install.packages("ggplot2"); library(ggplot2)
# define some variables
degrees2rad <- (2*pi)/360 #convert degrees to radiant
location <- location*degrees2rad #how far away from 00 the spiral starts
N1 <- floor(N/2)
N2 <- N-N1
#spiral 1
#we indicate it by 0 in V3
n <- as.vector(location+sqrt(runif(N1))*degrees*degrees2rad)
d1 <- t(rbind(-1*n*cos(n)+runif(N1)*blend, sin(n)*n+runif(N1)*blend, rep(0,N1)))
#the second spiral we indicate by 1 in V3
n <- as.vector(location+sqrt(runif(N1))*degrees*degrees2rad)
d2 <-t(rbind(n*cos(n)+runif(N1)*blend, -1*sin(n)*n+runif(N1)*blend, rep(1,N1)))
#combine the data
data <- data.frame(rbind(d1, d2))
names(data) <- c("x1", "x2", "y")
#create pdf
if (saveData) {
write.csv(data, "dataset.csv", row.names = FALSE)
}
#create pdf plot
if (savePlot) {
cairo_pdf("dataPlot.pdf")
print(
ggplot(data = data,
aes(x = x1, y = x2, colour=y)) +
scale_colour_continuous(guide = FALSE) +
geom_point() +
ggtitle("Spirals") +
xlab("x1") +
ylab("x2") +
theme_bw()
)
dev.off()
}
return(data)
}
data <- genSpirals()
View(data)
print(
ggplot(data = data,
aes(x = x1, y = x2, colour=y)) +
scale_colour_continuous(guide = FALSE) +
geom_point() +
ggtitle("Spirals") +
xlab("x1") +
ylab("x2") +
theme_bw()
)
?contour
?stat_contour
print(
ggplot(data = data,
aes(x = x1, y = x2, colour=y)) +
scale_colour_continuous(guide = FALSE) +
geom_point() +
ggtitle("Spirals") +
xlab("x1") +
ylab("x2") +
stat_contour()
theme_bw()
)
ggplot(data = data,
aes(x = x1, y = x2, colour=y)) +
scale_colour_continuous(guide = FALSE) +
geom_point() +
ggtitle("Spirals") +
xlab("x1") +
ylab("x2") +
stat_contour()
theme_bw()
?stat_contour
ggplot(data = data,
aes(x = x1, y = x2, colour=y)) +
scale_colour_continuous(guide = FALSE) +
geom_point() +
ggtitle("Spirals") +
xlab("x1") +
ylab("x2") +
stat_contour(data = data, stat = "contour")
theme_bw()
ggplot(data = data,
aes(x = x1, y = x2, colour=y)) +
scale_colour_continuous(guide = FALSE) +
geom_point() +
ggtitle("Spirals") +
xlab("x1") +
ylab("x2") +
stat_contour(data = data, stat = "contour")
theme_bw()
ggplot(data = data,
aes(x = x1, y = x2, colour=y)) +
scale_colour_continuous(guide = FALSE) +
geom_point() +
ggtitle("Spirals") +
xlab("x1") +
ylab("x2") +
stat_contour(data = data, stat = "contour")
theme_bw()
ggplot(data = data,
aes(x = x1, y = x2, colour=y)) +
scale_colour_continuous(guide = FALSE) +
geom_point() +
ggtitle("Spirals") +
xlab("x1") +
ylab("x2") +
stat_contour(data = data, stat = "contour")
theme_bw()
ggplot(data = data,
aes(x = x1, y = x2, colour=y)) +
scale_colour_continuous(guide = FALSE) +
geom_point() +
ggtitle("Spirals") +
xlab("x1") +
ylab("x2") +
stat_contour(data = data, stat = "contour")+
theme_bw()
ggplot(data = data,
aes(x = x1, y = x2, colour=y)) +
scale_colour_continuous(guide = FALSE) +
geom_point() +
ggtitle("Spirals") +
xlab("x1") +
ylab("x2") +
stat_contour(data = data)+
theme_bw()
ggplot(data = data,
aes(x = x1, y = x2, colour=y)) +
scale_colour_continuous(guide = FALSE) +
geom_point() +
ggtitle("Spirals") +
xlab("x1") +
ylab("x2") +
stat_contour()+
theme_bw()
ggplot(data = data,
aes(x = x1, y = x2, colour=y)) +
scale_colour_continuous(guide = FALSE) +
geom_point() +
ggtitle("Spirals") +
xlab("x1") +
ylab("x2") +
stat_contour()+
theme_bw()
ggplot(data = data,
aes(x = x1, y = x2, colour=y)) +
scale_colour_continuous(guide = FALSE) +
geom_point() +
ggtitle("Spirals") +
xlab("x1") +
ylab("x2") +
geom_contour()+
theme_bw()
?stat_contour
ggplot(data = data,
aes(x = x1, y = x2, colour=y)) +
scale_colour_continuous(guide = FALSE) +
geom_point() +
ggtitle("Spirals") +
xlab("x1") +
ylab("x2") +
geom_contour(na.rm = FALSE)+
theme_bw()
?rmvnorm
testset<- rmvnorm(1000, mean = c(0,0), sigma = diag(100))
testset<- rmvnorm(1000, mean = c(0,0), sigma = 100*diag(1000))
testset<- rmvnorm(1000, mean = c(0,0), sigma = 100*diag(2))
View(testset)
ggplot(data = data,
aes(x = x1, y = x2, colour=y)) +
scale_colour_continuous(guide = FALSE) +
geom_point() +
ggtitle("Spirals") +
xlab("x1") +
ylab("x2") +
geom_contour(na.rm = FALSE)+
ggplot(data = test,
)
theme_bw()
ggplot(data = data,
aes(x = x1, y = x2, colour=y)) +
scale_colour_continuous(guide = FALSE) +
geom_point() +
ggtitle("Spirals") +
xlab("x1") +
ylab("x2") +
ggplot(data = test,
)+
theme_bw()
ggplot(data = data,
aes(x = x1, y = x2, colour=y)) +
scale_colour_continuous(guide = FALSE) +
geom_point() +
ggtitle("Spirals") +
xlab("x1") +
ylab("x2") +
ggplot(data = testset,
)+
theme_bw()
ggplot(data = data,
aes(x = x1, y = x2, colour=y)) +
scale_colour_continuous(guide = FALSE) +
geom_point() +
ggtitle("Spirals") +
xlab("x1") +
ylab("x2") +
ggplot(data = testset,
aes(x = V1, y = V2)
)+
theme_bw()
ggplot(data = data,
aes(x = x1, y = x2, colour=y)) +
scale_colour_continuous(guide = FALSE) +
geom_point() +
ggtitle("Spirals") +
xlab("x1") +
ylab("x2") +
theme_bw()
testset<- rmvnorm(1000, mean = c(0,0), sigma = 10*diag(2))
View(testset)
datatest <- genSpirals()
data <- genSpirals()
View(dataset)
View(data)
View(data)
a <- kNN(dataset[,1:2], dataset[,4], data[,1:2])
a <- kNN(dataset[,1:2], dataset[,4], data[,1:2], type = predict)
a <- kNN(dataset[,1:2], dataset[,4], data[,1:2], type = "predict")
a <- kNN(dataset[,1:2], dataset[,4], data[,1:2], k = 5, p = 2, type = "predict")
genSpirals <- function(N = 200,
degrees = 570,
location = 90,
blend = 0.2,
saveData = FALSE,
savePlot = FALSE) {
# Generate two-spiral data
# idea of the problematic dataset: http://www.benmargolis.com/compsci/ai/two_spirals_problem.htm
# N - number of observations
# degrees - length of the spiral
# location - how far away from the origin
# blend<-blending together
#necessary packages
if (!require("ggplot2")) install.packages("ggplot2"); library(ggplot2)
# define some variables
degrees2rad <- (2*pi)/360 #convert degrees to radiant
location <- location*degrees2rad #how far away from 00 the spiral starts
N1 <- floor(N/2)
N2 <- N-N1
#spiral 1
#we indicate it by 0 in V3
n <- as.vector(location+sqrt(runif(N1))*degrees*degrees2rad)
d1 <- t(rbind(-1*n*cos(n)+runif(N1)*blend, sin(n)*n+runif(N1)*blend, rep(0,N1)))
#the second spiral we indicate by 1 in V3
n <- as.vector(location+sqrt(runif(N1))*degrees*degrees2rad)
d2 <-t(rbind(n*cos(n)+runif(N1)*blend, -1*sin(n)*n+runif(N1)*blend, rep(1,N1)))
#combine the data
data <- data.frame(rbind(d1, d2))
names(data) <- c("x1", "x2", "y")
#create pdf
if (saveData) {
write.csv(data, "dataset.csv", row.names = FALSE)
}
#create pdf plot
if (savePlot) {
cairo_pdf("dataPlot.pdf")
print(
ggplot(data = data,
aes(x = x1, y = x2, colour=y)) +
scale_colour_continuous(guide = FALSE) +
geom_point() +
ggtitle("Spirals") +
xlab("x1") +
ylab("x2") +
theme_bw()
)
dev.off()
}
return(data)
}
data <- genSpirals()
a <- kNN(dataset[,1:2], dataset[,4], data[,1:2], k = 5, p = 2, type = "predict")
a$predLabels
a$prob
realdata <- cbind(data, a$predLabels, a$prob)
write.csv(realdata, "predictions.csv", row.names = FALSE)
colnames(realdata) <- c("X1", "X2", "Y", "predLabels","prob")
write.csv(realdata, "predictions.csv", row.names = FALSE)
print(
ggplot(data = realdata,
aes(x = x1, y = x2, colour=y)) +
scale_colour_continuous(guide = FALSE) +
geom_point() +
ggtitle("Spirals") +
xlab("x1") +
ylab("x2") +
stat_contour(mapping = predLabels)
theme_bw()
)
ggplot(data = realdata,
aes(x = x1, y = x2, colour=y)) +
scale_colour_continuous(guide = FALSE) +
geom_point() +
ggtitle("Spirals") +
xlab("x1") +
ylab("x2") +
stat_contour(mapping = predLabels)+
theme_bw()
ggplot(data = realdata,
aes(x = x1, y = x2, colour=y)) +
scale_colour_continuous(guide = FALSE) +
geom_point() +
ggtitle("Spirals") +
xlab("x1") +
ylab("x2") +
stat_contour(mapping = predLabels, data = realdata)+
theme_bw()
MNIST_train <- read.csv("/Users/guglielmo/Desktop/BGSE/winter_term/Adv_Computing/15D012 Advanced Computational Methods/datasets", header = FALSE, sep =",")
MNIST_train <- read.csv("/Users/guglielmo/Desktop/BGSE/winter_term/Adv_Computing/15D012 Advanced Computational Methods/datasets", header = FALSE, sep =",")
MNIST_train <- read.csv("/Users/guglielmo/Desktop/BGSE/winter_term/Adv_Computing/15D012 Advanced Computational Methods/datasets/MNIST_training.csv", header = FALSE, sep =",")
MNIST_train <- read.csv("/Users/guglielmo/Desktop/BGSE/winter_term/Adv_Computing/"15D012 Advanced Computational Methods"/datasets/MNIST_training.csv", header = FALSE, sep =",")
MNIST_train <- read.csv("/Users/guglielmo/Desktop/BGSE/winter_term/Adv_Computing/15D012_Advanced_Computational_Methods/datasets/MNIST_training.csv", header = FALSE, sep =",")
MNIST_train <- read.csv("/Users/guglielmo/Desktop/BGSE/winter_term/Adv_Computing/15D012_Advanced_Computational_Methods/datasets/MNIST/MNIST_training.csv", header = FALSE, sep =",")
View(MNIST_train)
MNIST_test <- read.csv("/Users/guglielmo/Desktop/BGSE/winter_term/Adv_Computing/15D012_Advanced_Computational_Methods/datasets/MNIST/MNIST_test.csv", header = FALSE, sep =",")
View(MNIST_test)
MNIST_train <- read.csv("/Users/guglielmo/Desktop/BGSE/winter_term/Adv_Computing/15D012_Advanced_Computational_Methods/datasets/MNIST/MNIST_training.csv", header = TRUE, sep =",")
View(MNIST_train)
MNIST_train <- read.csv("/Users/guglielmo/Desktop/BGSE/winter_term/Adv_Computing/15D012_Advanced_Computational_Methods/datasets/MNIST/MNIST_training.csv", header = FALSE, sep =",")
View(MNIST_train)
if (!require("class")) install.packages("class")
library(class)
train <- MNIST_train[, 2:257]
test <- MNIST_test[,1:256]
cl <- MNIST_train[,1]
predictedClasses <- knn(train, test, cl, k = 15, prob = TRUE)
head(predictedClasses)
?knn
showMethods(knn)
source("/Users/guglielmo/Desktop/BGSE/winter_term/Adv_Computing/15D012_Advanced_Computational_Methods/datasets/MNIST/displayDigit.R")
label <- trainData[1, 1]
label <- MNIST_train[1, 1]
# 2. the rest are pixel intensities for 16x16 image of digits
features <- as.numeric(MNIST_train[1, 2:257])
displayDigit(features, label, newDevice = FALSE)
label <- MNIST_train[, 1]
# 2. the rest are pixel intensities for 16x16 image of digits
features <- as.numeric(MNIST_train[, 2:257])
displayDigit(features, label, newDevice = FALSE)
label <- MNIST_train[1, 1]
# 2. the rest are pixel intensities for 16x16 image of digits
features <- as.numeric(MNIST_train[1, 2:257])
displayDigit(features, label, newDevice = FALSE)
displayDigitSeq(trainData[, 2:257], trainData[, 1])
displayDigitSeq(MNIST_train[, 2:257], MNIST_train[, 1])
